<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="885.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="885.00"> </text><svg id="frames" x="10" width="1180" total_samples="81010283"><g><title>[[heap]] (12,773 samples, 0.02%)</title><rect x="0.0000%" y="821" width="0.0158%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12773"/><text x="0.2500%" y="831.50"></text></g><g><title>clone3 (12,773 samples, 0.02%)</title><rect x="0.0000%" y="805" width="0.0158%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="12773"/><text x="0.2500%" y="815.50"></text></g><g><title>ret_from_fork (12,773 samples, 0.02%)</title><rect x="0.0000%" y="789" width="0.0158%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="12773"/><text x="0.2500%" y="799.50"></text></g><g><title>schedule_tail (12,773 samples, 0.02%)</title><rect x="0.0000%" y="773" width="0.0158%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="12773"/><text x="0.2500%" y="783.50"></text></g><g><title>finish_task_switch.isra.0 (12,773 samples, 0.02%)</title><rect x="0.0000%" y="757" width="0.0158%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="12773"/><text x="0.2500%" y="767.50"></text></g><g><title>asm_sysvec_irq_work (9,630 samples, 0.01%)</title><rect x="0.0039%" y="741" width="0.0119%" height="15" fill="rgb(232,128,0)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="751.50"></text></g><g><title>sysvec_irq_work (9,630 samples, 0.01%)</title><rect x="0.0039%" y="725" width="0.0119%" height="15" fill="rgb(207,160,47)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="735.50"></text></g><g><title>__sysvec_irq_work (9,630 samples, 0.01%)</title><rect x="0.0039%" y="709" width="0.0119%" height="15" fill="rgb(228,23,34)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="719.50"></text></g><g><title>irq_work_run (9,630 samples, 0.01%)</title><rect x="0.0039%" y="693" width="0.0119%" height="15" fill="rgb(218,30,26)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="703.50"></text></g><g><title>irq_work_run_list (9,630 samples, 0.01%)</title><rect x="0.0039%" y="677" width="0.0119%" height="15" fill="rgb(220,122,19)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="687.50"></text></g><g><title>irq_work_single (9,630 samples, 0.01%)</title><rect x="0.0039%" y="661" width="0.0119%" height="15" fill="rgb(250,228,42)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="671.50"></text></g><g><title>perf_pending_irq (9,630 samples, 0.01%)</title><rect x="0.0039%" y="645" width="0.0119%" height="15" fill="rgb(240,193,28)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="655.50"></text></g><g><title>perf_event_wakeup (9,630 samples, 0.01%)</title><rect x="0.0039%" y="629" width="0.0119%" height="15" fill="rgb(216,20,37)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="639.50"></text></g><g><title>__wake_up_common_lock (9,630 samples, 0.01%)</title><rect x="0.0039%" y="613" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="623.50"></text></g><g><title>__wake_up_common (9,630 samples, 0.01%)</title><rect x="0.0039%" y="597" width="0.0119%" height="15" fill="rgb(217,207,13)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="607.50"></text></g><g><title>pollwake (9,630 samples, 0.01%)</title><rect x="0.0039%" y="581" width="0.0119%" height="15" fill="rgb(231,73,38)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="591.50"></text></g><g><title>try_to_wake_up (9,630 samples, 0.01%)</title><rect x="0.0039%" y="565" width="0.0119%" height="15" fill="rgb(225,20,46)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="575.50"></text></g><g><title>select_task_rq_fair (9,630 samples, 0.01%)</title><rect x="0.0039%" y="549" width="0.0119%" height="15" fill="rgb(210,31,41)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="559.50"></text></g><g><title>task_h_load (9,630 samples, 0.01%)</title><rect x="0.0039%" y="533" width="0.0119%" height="15" fill="rgb(221,200,47)" fg:x="3143" fg:w="9630"/><text x="0.2539%" y="543.50"></text></g><g><title>__irqentry_text_end (19,706 samples, 0.02%)</title><rect x="0.0158%" y="821" width="0.0243%" height="15" fill="rgb(226,26,5)" fg:x="12773" fg:w="19706"/><text x="0.2658%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="549" width="3.3881%" height="15" fill="rgb(249,33,26)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="559.50">cor..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="533" width="3.3881%" height="15" fill="rgb(235,183,28)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="543.50">&lt;co..</text></g><g><title>core::iter::adapters::try_process (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="517" width="3.3881%" height="15" fill="rgb(221,5,38)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="527.50">cor..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="501" width="3.3881%" height="15" fill="rgb(247,18,42)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="511.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="485" width="3.3881%" height="15" fill="rgb(241,131,45)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="495.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="469" width="3.3881%" height="15" fill="rgb(249,31,29)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="479.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="453" width="3.3881%" height="15" fill="rgb(225,111,53)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="463.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="437" width="3.3881%" height="15" fill="rgb(238,160,17)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="447.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="421" width="3.3881%" height="15" fill="rgb(214,148,48)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="431.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="405" width="3.3881%" height="15" fill="rgb(232,36,49)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="415.50">all..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="389" width="3.3881%" height="15" fill="rgb(209,103,24)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="399.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="373" width="3.3881%" height="15" fill="rgb(229,88,8)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="383.50">cor..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="357" width="3.3881%" height="15" fill="rgb(213,181,19)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="367.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="341" width="3.3881%" height="15" fill="rgb(254,191,54)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="351.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="325" width="3.3881%" height="15" fill="rgb(241,83,37)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="335.50">cor..</text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="309" width="3.3881%" height="15" fill="rgb(233,36,39)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="319.50">cor..</text></g><g><title>flamegraph_scaling::main::{{closure}} (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="293" width="3.3881%" height="15" fill="rgb(226,3,54)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="303.50">fla..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="277" width="3.3881%" height="15" fill="rgb(245,192,40)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="287.50">&lt;T ..</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn core::error::Error&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="261" width="3.3881%" height="15" fill="rgb(238,167,29)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="271.50">&lt;al..</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn core::error::Error&gt; as core::convert::From&lt;alloc::string::String&gt;&gt;::from (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="245" width="3.3881%" height="15" fill="rgb(232,182,51)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="255.50">&lt;al..</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt; as core::convert::From&lt;alloc::string::String&gt;&gt;::from (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="229" width="3.3881%" height="15" fill="rgb(231,60,39)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="239.50">&lt;al..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="213" width="3.3881%" height="15" fill="rgb(208,69,12)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="223.50">all..</text></g><g><title>alloc::alloc::exchange_malloc (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="197" width="3.3881%" height="15" fill="rgb(235,93,37)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="207.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="181" width="3.3881%" height="15" fill="rgb(213,116,39)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="191.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="165" width="3.3881%" height="15" fill="rgb(222,207,29)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="175.50">all..</text></g><g><title>alloc::alloc::alloc (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="149" width="3.3881%" height="15" fill="rgb(206,96,30)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="159.50">all..</text></g><g><title>__rdl_alloc (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="133" width="3.3881%" height="15" fill="rgb(218,138,4)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="143.50">__r..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="117" width="3.3881%" height="15" fill="rgb(250,191,14)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="127.50">std..</text></g><g><title>__GI___libc_malloc (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="101" width="3.3881%" height="15" fill="rgb(239,60,40)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="111.50">__G..</text></g><g><title>checked_request2size (2,744,692 samples, 3.39%)</title><rect x="0.0401%" y="85" width="3.3881%" height="15" fill="rgb(206,27,48)" fg:x="32479" fg:w="2744692"/><text x="0.2901%" y="95.50">che..</text></g><g><title>allocate_stack (8,851,161 samples, 10.93%)</title><rect x="3.4282%" y="101" width="10.9260%" height="15" fill="rgb(225,35,8)" fg:x="2777171" fg:w="8851161"/><text x="3.6782%" y="111.50">allocate_stack</text></g><g><title>core::iter::traits::iterator::Iterator::collect (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="389" width="23.4268%" height="15" fill="rgb(250,213,24)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="399.50">core::iter::traits::iterator::Iterato..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="373" width="23.4268%" height="15" fill="rgb(247,123,22)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="357" width="23.4268%" height="15" fill="rgb(231,138,38)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::sp..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="341" width="23.4268%" height="15" fill="rgb(231,145,46)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::sp..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="325" width="23.4268%" height="15" fill="rgb(251,118,11)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="309" width="23.4268%" height="15" fill="rgb(217,147,25)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="293" width="23.4268%" height="15" fill="rgb(247,81,37)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="303.50">core::iter::traits::iterator::Iterato..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="277" width="23.4268%" height="15" fill="rgb(209,12,38)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="287.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; ..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="261" width="23.4268%" height="15" fill="rgb(227,1,9)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="271.50">&lt;core::iter::adapters::enumerate::Enu..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="245" width="23.4268%" height="15" fill="rgb(248,47,43)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="255.50">core::iter::traits::iterator::Iterato..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="229" width="23.4268%" height="15" fill="rgb(221,10,30)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="239.50">&lt;core::iter::adapters::enumerate::Enu..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="213" width="23.4268%" height="15" fill="rgb(210,229,1)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="223.50">core::iter::adapters::map::map_fold::..</text></g><g><title>flamegraph_scaling::benchtime::{{closure}}::{{closure}}::{{closure}} (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="197" width="23.4268%" height="15" fill="rgb(222,148,37)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="207.50">flamegraph_scaling::benchtime::{{clos..</text></g><g><title>std::thread::scoped::Scope::spawn (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="181" width="23.4268%" height="15" fill="rgb(234,67,33)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="191.50">std::thread::scoped::Scope::spawn</text></g><g><title>std::thread::scoped::&lt;impl std::thread::Builder&gt;::spawn_scoped (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="165" width="23.4268%" height="15" fill="rgb(247,98,35)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="175.50">std::thread::scoped::&lt;impl std::threa..</text></g><g><title>std::thread::Builder::spawn_unchecked_ (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="149" width="23.4268%" height="15" fill="rgb(247,138,52)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="159.50">std::thread::Builder::spawn_unchecked_</text></g><g><title>std::sys::pal::unix::thread::Thread::new (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="133" width="23.4268%" height="15" fill="rgb(213,79,30)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="143.50">std::sys::pal::unix::thread::Thread::..</text></g><g><title>__pthread_create_2_1 (18,978,144 samples, 23.43%)</title><rect x="3.4282%" y="117" width="23.4268%" height="15" fill="rgb(246,177,23)" fg:x="2777171" fg:w="18978144"/><text x="3.6782%" y="127.50">__pthread_create_2_1</text></g><g><title>entry_SYSCALL_64_after_hwframe (10,126,983 samples, 12.50%)</title><rect x="14.3541%" y="101" width="12.5009%" height="15" fill="rgb(230,62,27)" fg:x="11628332" fg:w="10126983"/><text x="14.6041%" y="111.50">entry_SYSCALL_64_af..</text></g><g><title>do_syscall_64 (10,126,983 samples, 12.50%)</title><rect x="14.3541%" y="85" width="12.5009%" height="15" fill="rgb(216,154,8)" fg:x="11628332" fg:w="10126983"/><text x="14.6041%" y="95.50">do_syscall_64</text></g><g><title>__x64_sys_rt_sigprocmask (10,126,983 samples, 12.50%)</title><rect x="14.3541%" y="69" width="12.5009%" height="15" fill="rgb(244,35,45)" fg:x="11628332" fg:w="10126983"/><text x="14.6041%" y="79.50">__x64_sys_rt_sigpro..</text></g><g><title>sigprocmask (10,126,983 samples, 12.50%)</title><rect x="14.3541%" y="53" width="12.5009%" height="15" fill="rgb(251,115,12)" fg:x="11628332" fg:w="10126983"/><text x="14.6041%" y="63.50">sigprocmask</text></g><g><title>_raw_spin_lock_irq (10,126,983 samples, 12.50%)</title><rect x="14.3541%" y="37" width="12.5009%" height="15" fill="rgb(240,54,50)" fg:x="11628332" fg:w="10126983"/><text x="14.6041%" y="47.50">_raw_spin_lock_irq</text></g><g><title>_start (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="821" width="37.1557%" height="15" fill="rgb(233,84,52)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="831.50">_start</text></g><g><title>__libc_start_main_impl (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="805" width="37.1557%" height="15" fill="rgb(207,117,47)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="815.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="789" width="37.1557%" height="15" fill="rgb(249,43,39)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="799.50">__libc_start_call_main</text></g><g><title>main (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="773" width="37.1557%" height="15" fill="rgb(209,38,44)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="757" width="37.1557%" height="15" fill="rgb(236,212,23)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="741" width="37.1557%" height="15" fill="rgb(242,79,21)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="725" width="37.1557%" height="15" fill="rgb(211,96,35)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="709" width="37.1557%" height="15" fill="rgb(253,215,40)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="693" width="37.1557%" height="15" fill="rgb(211,81,21)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="703.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="677" width="37.1557%" height="15" fill="rgb(208,190,38)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="661" width="37.1557%" height="15" fill="rgb(235,213,38)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="645" width="37.1557%" height="15" fill="rgb(237,122,38)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="629" width="37.1557%" height="15" fill="rgb(244,218,35)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnc..</text></g><g><title>std::rt::lang_start::{{closure}} (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="613" width="37.1557%" height="15" fill="rgb(240,68,47)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="623.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="597" width="37.1557%" height="15" fill="rgb(210,16,53)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="607.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="581" width="37.1557%" height="15" fill="rgb(235,124,12)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>flamegraph_scaling::main (30,099,963 samples, 37.16%)</title><rect x="0.0401%" y="565" width="37.1557%" height="15" fill="rgb(224,169,11)" fg:x="32479" fg:w="30099963"/><text x="0.2901%" y="575.50">flamegraph_scaling::main</text></g><g><title>flamegraph_scaling::benchtime (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="549" width="33.7677%" height="15" fill="rgb(250,166,2)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="559.50">flamegraph_scaling::benchtime</text></g><g><title>wordle::stopwatch (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="533" width="33.7677%" height="15" fill="rgb(242,216,29)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="543.50">wordle::stopwatch</text></g><g><title>flamegraph_scaling::benchtime::{{closure}} (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="517" width="33.7677%" height="15" fill="rgb(230,116,27)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="527.50">flamegraph_scaling::benchtime::{{closure}}</text></g><g><title>std::thread::scoped::scope (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="501" width="33.7677%" height="15" fill="rgb(228,99,48)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="511.50">std::thread::scoped::scope</text></g><g><title>std::panic::catch_unwind (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="485" width="33.7677%" height="15" fill="rgb(253,11,6)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="469" width="33.7677%" height="15" fill="rgb(247,143,39)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="453" width="33.7677%" height="15" fill="rgb(236,97,10)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="463.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="437" width="33.7677%" height="15" fill="rgb(233,208,19)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="447.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core:..</text></g><g><title>std::thread::scoped::scope::{{closure}} (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="421" width="33.7677%" height="15" fill="rgb(216,164,2)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="431.50">std::thread::scoped::scope::{{closure}}</text></g><g><title>flamegraph_scaling::benchtime::{{closure}}::{{closure}} (27,355,271 samples, 33.77%)</title><rect x="3.4282%" y="405" width="33.7677%" height="15" fill="rgb(220,129,5)" fg:x="2777171" fg:w="27355271"/><text x="3.6782%" y="415.50">flamegraph_scaling::benchtime::{{closure}}::{{closure}}</text></g><g><title>std::thread::scoped::ScopedJoinHandle&lt;T&gt;::join (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="389" width="10.3408%" height="15" fill="rgb(242,17,10)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="399.50">std::thread::sc..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="373" width="10.3408%" height="15" fill="rgb(242,107,0)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="383.50">std::thread::Jo..</text></g><g><title>std::sys::pal::unix::thread::Thread::join (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="357" width="10.3408%" height="15" fill="rgb(251,28,31)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="367.50">std::sys::pal::..</text></g><g><title>__pthread_clockjoin_ex (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="341" width="10.3408%" height="15" fill="rgb(233,223,10)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="351.50">__pthread_clock..</text></g><g><title>__GI___nptl_deallocate_stack (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="325" width="10.3408%" height="15" fill="rgb(215,21,27)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="335.50">__GI___nptl_dea..</text></g><g><title>queue_stack (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="309" width="10.3408%" height="15" fill="rgb(232,23,21)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="319.50">queue_stack</text></g><g><title>__nptl_free_stacks (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="293" width="10.3408%" height="15" fill="rgb(244,5,23)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="303.50">__nptl_free_sta..</text></g><g><title>__GI_munmap (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="277" width="10.3408%" height="15" fill="rgb(226,81,46)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="287.50">__GI_munmap</text></g><g><title>entry_SYSCALL_64_after_hwframe (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="261" width="10.3408%" height="15" fill="rgb(247,70,30)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="271.50">entry_SYSCALL_6..</text></g><g><title>do_syscall_64 (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="245" width="10.3408%" height="15" fill="rgb(212,68,19)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="255.50">do_syscall_64</text></g><g><title>__x64_sys_munmap (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="229" width="10.3408%" height="15" fill="rgb(240,187,13)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="239.50">__x64_sys_munmap</text></g><g><title>__vm_munmap (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="213" width="10.3408%" height="15" fill="rgb(223,113,26)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="223.50">__vm_munmap</text></g><g><title>do_mas_munmap (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="197" width="10.3408%" height="15" fill="rgb(206,192,2)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="207.50">do_mas_munmap</text></g><g><title>do_mas_align_munmap (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="181" width="10.3408%" height="15" fill="rgb(241,108,4)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="191.50">do_mas_align_mu..</text></g><g><title>unmap_region (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="165" width="10.3408%" height="15" fill="rgb(247,173,49)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="175.50">unmap_region</text></g><g><title>free_pgtables (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="149" width="10.3408%" height="15" fill="rgb(224,114,35)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="159.50">free_pgtables</text></g><g><title>unlink_anon_vmas (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="133" width="10.3408%" height="15" fill="rgb(245,159,27)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="143.50">unlink_anon_vmas</text></g><g><title>up_write (8,377,127 samples, 10.34%)</title><rect x="26.8550%" y="117" width="10.3408%" height="15" fill="rgb(245,172,44)" fg:x="21755315" fg:w="8377127"/><text x="27.1050%" y="127.50">up_write</text></g><g><title>__cgroup_throttle_swaprate (20,450 samples, 0.03%)</title><rect x="37.2193%" y="741" width="0.0252%" height="15" fill="rgb(236,23,11)" fg:x="30151450" fg:w="20450"/><text x="37.4693%" y="751.50"></text></g><g><title>blk_cgroup_congested (20,450 samples, 0.03%)</title><rect x="37.2193%" y="725" width="0.0252%" height="15" fill="rgb(205,117,38)" fg:x="30151450" fg:w="20450"/><text x="37.4693%" y="735.50"></text></g><g><title>__mem_cgroup_charge (12,206 samples, 0.02%)</title><rect x="37.2445%" y="741" width="0.0151%" height="15" fill="rgb(237,72,25)" fg:x="30171900" fg:w="12206"/><text x="37.4945%" y="751.50"></text></g><g><title>charge_memcg (12,206 samples, 0.02%)</title><rect x="37.2445%" y="725" width="0.0151%" height="15" fill="rgb(244,70,9)" fg:x="30171900" fg:w="12206"/><text x="37.4945%" y="735.50"></text></g><g><title>folio_add_lru (13,471 samples, 0.02%)</title><rect x="37.2596%" y="741" width="0.0166%" height="15" fill="rgb(217,125,39)" fg:x="30184106" fg:w="13471"/><text x="37.5096%" y="751.50"></text></g><g><title>pmd_page_vaddr (11,432 samples, 0.01%)</title><rect x="37.2762%" y="741" width="0.0141%" height="15" fill="rgb(235,36,10)" fg:x="30197577" fg:w="11432"/><text x="37.5262%" y="751.50"></text></g><g><title>handle_mm_fault (87,004 samples, 0.11%)</title><rect x="37.1958%" y="773" width="0.1074%" height="15" fill="rgb(251,123,47)" fg:x="30132442" fg:w="87004"/><text x="37.4458%" y="783.50"></text></g><g><title>__handle_mm_fault (87,004 samples, 0.11%)</title><rect x="37.1958%" y="757" width="0.1074%" height="15" fill="rgb(221,13,13)" fg:x="30132442" fg:w="87004"/><text x="37.4458%" y="767.50"></text></g><g><title>vma_alloc_folio (10,437 samples, 0.01%)</title><rect x="37.2903%" y="741" width="0.0129%" height="15" fill="rgb(238,131,9)" fg:x="30209009" fg:w="10437"/><text x="37.5403%" y="751.50"></text></g><g><title>__folio_alloc (10,437 samples, 0.01%)</title><rect x="37.2903%" y="725" width="0.0129%" height="15" fill="rgb(211,50,8)" fg:x="30209009" fg:w="10437"/><text x="37.5403%" y="735.50"></text></g><g><title>__alloc_pages (10,437 samples, 0.01%)</title><rect x="37.2903%" y="709" width="0.0129%" height="15" fill="rgb(245,182,24)" fg:x="30209009" fg:w="10437"/><text x="37.5403%" y="719.50"></text></g><g><title>__list_add_valid (10,736 samples, 0.01%)</title><rect x="37.3276%" y="725" width="0.0133%" height="15" fill="rgb(242,14,37)" fg:x="30239160" fg:w="10736"/><text x="37.5776%" y="735.50"></text></g><g><title>_raw_spin_lock_irq (8,895 samples, 0.01%)</title><rect x="37.3408%" y="725" width="0.0110%" height="15" fill="rgb(246,228,12)" fg:x="30249896" fg:w="8895"/><text x="37.5908%" y="735.50"></text></g><g><title>__perf_event_task_sched_out (16,067 samples, 0.02%)</title><rect x="37.3636%" y="677" width="0.0198%" height="15" fill="rgb(213,55,15)" fg:x="30268362" fg:w="16067"/><text x="37.6136%" y="687.50"></text></g><g><title>amd_pmu_v2_disable_all (16,067 samples, 0.02%)</title><rect x="37.3636%" y="661" width="0.0198%" height="15" fill="rgb(209,9,3)" fg:x="30268362" fg:w="16067"/><text x="37.6136%" y="671.50"></text></g><g><title>native_write_msr (16,067 samples, 0.02%)</title><rect x="37.3636%" y="645" width="0.0198%" height="15" fill="rgb(230,59,30)" fg:x="30268362" fg:w="16067"/><text x="37.6136%" y="655.50"></text></g><g><title>dequeue_task_fair (11,684 samples, 0.01%)</title><rect x="37.3834%" y="677" width="0.0144%" height="15" fill="rgb(209,121,21)" fg:x="30284429" fg:w="11684"/><text x="37.6334%" y="687.50"></text></g><g><title>dequeue_entity (11,684 samples, 0.01%)</title><rect x="37.3834%" y="661" width="0.0144%" height="15" fill="rgb(220,109,13)" fg:x="30284429" fg:w="11684"/><text x="37.6334%" y="671.50"></text></g><g><title>update_curr (11,684 samples, 0.01%)</title><rect x="37.3834%" y="645" width="0.0144%" height="15" fill="rgb(232,18,1)" fg:x="30284429" fg:w="11684"/><text x="37.6334%" y="655.50"></text></g><g><title>__cgroup_account_cputime (11,684 samples, 0.01%)</title><rect x="37.3834%" y="629" width="0.0144%" height="15" fill="rgb(215,41,42)" fg:x="30284429" fg:w="11684"/><text x="37.6334%" y="639.50"></text></g><g><title>cgroup_rstat_updated (11,684 samples, 0.01%)</title><rect x="37.3834%" y="613" width="0.0144%" height="15" fill="rgb(224,123,36)" fg:x="30284429" fg:w="11684"/><text x="37.6334%" y="623.50"></text></g><g><title>down_read_killable (91,821 samples, 0.11%)</title><rect x="37.3032%" y="757" width="0.1133%" height="15" fill="rgb(240,125,3)" fg:x="30219446" fg:w="91821"/><text x="37.5532%" y="767.50"></text></g><g><title>rwsem_down_read_slowpath (91,821 samples, 0.11%)</title><rect x="37.3032%" y="741" width="0.1133%" height="15" fill="rgb(205,98,50)" fg:x="30219446" fg:w="91821"/><text x="37.5532%" y="751.50"></text></g><g><title>schedule_preempt_disabled (52,476 samples, 0.06%)</title><rect x="37.3518%" y="725" width="0.0648%" height="15" fill="rgb(205,185,37)" fg:x="30258791" fg:w="52476"/><text x="37.6018%" y="735.50"></text></g><g><title>schedule (52,476 samples, 0.06%)</title><rect x="37.3518%" y="709" width="0.0648%" height="15" fill="rgb(238,207,15)" fg:x="30258791" fg:w="52476"/><text x="37.6018%" y="719.50"></text></g><g><title>__schedule (42,905 samples, 0.05%)</title><rect x="37.3636%" y="693" width="0.0530%" height="15" fill="rgb(213,199,42)" fg:x="30268362" fg:w="42905"/><text x="37.6136%" y="703.50"></text></g><g><title>put_prev_task_fair (12,732 samples, 0.02%)</title><rect x="37.4009%" y="677" width="0.0157%" height="15" fill="rgb(235,201,11)" fg:x="30298535" fg:w="12732"/><text x="37.6509%" y="687.50"></text></g><g><title>put_prev_entity (12,732 samples, 0.02%)</title><rect x="37.4009%" y="661" width="0.0157%" height="15" fill="rgb(207,46,11)" fg:x="30298535" fg:w="12732"/><text x="37.6509%" y="671.50"></text></g><g><title>down_read_trylock (8,884 samples, 0.01%)</title><rect x="37.4166%" y="757" width="0.0110%" height="15" fill="rgb(241,35,35)" fg:x="30311267" fg:w="8884"/><text x="37.6666%" y="767.50"></text></g><g><title>asm_exc_page_fault (227,529 samples, 0.28%)</title><rect x="37.1958%" y="821" width="0.2809%" height="15" fill="rgb(243,32,47)" fg:x="30132442" fg:w="227529"/><text x="37.4458%" y="831.50"></text></g><g><title>exc_page_fault (227,529 samples, 0.28%)</title><rect x="37.1958%" y="805" width="0.2809%" height="15" fill="rgb(247,202,23)" fg:x="30132442" fg:w="227529"/><text x="37.4458%" y="815.50"></text></g><g><title>do_user_addr_fault (227,529 samples, 0.28%)</title><rect x="37.1958%" y="789" width="0.2809%" height="15" fill="rgb(219,102,11)" fg:x="30132442" fg:w="227529"/><text x="37.4458%" y="799.50"></text></g><g><title>lock_mm_and_find_vma (140,525 samples, 0.17%)</title><rect x="37.3032%" y="773" width="0.1735%" height="15" fill="rgb(243,110,44)" fg:x="30219446" fg:w="140525"/><text x="37.5532%" y="783.50"></text></g><g><title>find_vma (39,820 samples, 0.05%)</title><rect x="37.4275%" y="757" width="0.0492%" height="15" fill="rgb(222,74,54)" fg:x="30320151" fg:w="39820"/><text x="37.6775%" y="767.50"></text></g><g><title>mt_find (29,340 samples, 0.04%)</title><rect x="37.4405%" y="741" width="0.0362%" height="15" fill="rgb(216,99,12)" fg:x="30330631" fg:w="29340"/><text x="37.6905%" y="751.50"></text></g><g><title>mtree_range_walk (9,504 samples, 0.01%)</title><rect x="37.4650%" y="725" width="0.0117%" height="15" fill="rgb(226,22,26)" fg:x="30350467" fg:w="9504"/><text x="37.7150%" y="735.50"></text></g><g><title>allocate_fake_cpuc (8,951,354 samples, 11.05%)</title><rect x="37.4767%" y="629" width="11.0497%" height="15" fill="rgb(217,163,10)" fg:x="30359971" fg:w="8951354"/><text x="37.7267%" y="639.50">allocate_fake_cp..</text></g><g><title>kmalloc_trace (8,951,354 samples, 11.05%)</title><rect x="37.4767%" y="613" width="11.0497%" height="15" fill="rgb(213,25,53)" fg:x="30359971" fg:w="8951354"/><text x="37.7267%" y="623.50">kmalloc_trace</text></g><g><title>__kmem_cache_alloc_node (8,951,354 samples, 11.05%)</title><rect x="37.4767%" y="597" width="11.0497%" height="15" fill="rgb(252,105,26)" fg:x="30359971" fg:w="8951354"/><text x="37.7267%" y="607.50">__kmem_cache_all..</text></g><g><title>memset_erms (8,951,354 samples, 11.05%)</title><rect x="37.4767%" y="581" width="11.0497%" height="15" fill="rgb(220,39,43)" fg:x="30359971" fg:w="8951354"/><text x="37.7267%" y="591.50">memset_erms</text></g><g><title>entry_SYSCALL_64_after_hwframe (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="805" width="22.7086%" height="15" fill="rgb(229,68,48)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="815.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="789" width="22.7086%" height="15" fill="rgb(252,8,32)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="799.50">do_syscall_64</text></g><g><title>__do_sys_clone3 (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="773" width="22.7086%" height="15" fill="rgb(223,20,43)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="783.50">__do_sys_clone3</text></g><g><title>kernel_clone (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="757" width="22.7086%" height="15" fill="rgb(229,81,49)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="767.50">kernel_clone</text></g><g><title>copy_process (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="741" width="22.7086%" height="15" fill="rgb(236,28,36)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="751.50">copy_process</text></g><g><title>perf_event_init_task (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="725" width="22.7086%" height="15" fill="rgb(249,185,26)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="735.50">perf_event_init_task</text></g><g><title>inherit_task_group.isra.0 (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="709" width="22.7086%" height="15" fill="rgb(249,174,33)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="719.50">inherit_task_group.isra.0</text></g><g><title>inherit_event.constprop.0 (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="693" width="22.7086%" height="15" fill="rgb(233,201,37)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="703.50">inherit_event.constprop.0</text></g><g><title>perf_event_alloc (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="677" width="22.7086%" height="15" fill="rgb(221,78,26)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="687.50">perf_event_alloc</text></g><g><title>perf_try_init_event (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="661" width="22.7086%" height="15" fill="rgb(250,127,30)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="671.50">perf_try_init_event</text></g><g><title>x86_pmu_event_init (18,396,277 samples, 22.71%)</title><rect x="37.4767%" y="645" width="22.7086%" height="15" fill="rgb(230,49,44)" fg:x="30359971" fg:w="18396277"/><text x="37.7267%" y="655.50">x86_pmu_event_init</text></g><g><title>amd_pmu_hw_config (9,444,923 samples, 11.66%)</title><rect x="48.5263%" y="629" width="11.6589%" height="15" fill="rgb(229,67,23)" fg:x="39311325" fg:w="9444923"/><text x="48.7763%" y="639.50">amd_pmu_hw_config</text></g><g><title>tlb_finish_mmu (49,696 samples, 0.06%)</title><rect x="60.1853%" y="677" width="0.0613%" height="15" fill="rgb(249,83,47)" fg:x="48756248" fg:w="49696"/><text x="60.4353%" y="687.50"></text></g><g><title>flush_tlb_mm_range (49,696 samples, 0.06%)</title><rect x="60.1853%" y="661" width="0.0613%" height="15" fill="rgb(215,43,3)" fg:x="48756248" fg:w="49696"/><text x="60.4353%" y="671.50"></text></g><g><title>on_each_cpu_cond_mask (49,696 samples, 0.06%)</title><rect x="60.1853%" y="645" width="0.0613%" height="15" fill="rgb(238,154,13)" fg:x="48756248" fg:w="49696"/><text x="60.4353%" y="655.50"></text></g><g><title>smp_call_function_many_cond (49,696 samples, 0.06%)</title><rect x="60.1853%" y="629" width="0.0613%" height="15" fill="rgb(219,56,2)" fg:x="48756248" fg:w="49696"/><text x="60.4353%" y="639.50"></text></g><g><title>llist_add_batch (49,696 samples, 0.06%)</title><rect x="60.1853%" y="613" width="0.0613%" height="15" fill="rgb(233,0,4)" fg:x="48756248" fg:w="49696"/><text x="60.4353%" y="623.50"></text></g><g><title>advise_stack_range (2,005,500 samples, 2.48%)</title><rect x="60.1853%" y="789" width="2.4756%" height="15" fill="rgb(235,30,7)" fg:x="48756248" fg:w="2005500"/><text x="60.4353%" y="799.50">ad..</text></g><g><title>__GI_madvise (2,005,500 samples, 2.48%)</title><rect x="60.1853%" y="773" width="2.4756%" height="15" fill="rgb(250,79,13)" fg:x="48756248" fg:w="2005500"/><text x="60.4353%" y="783.50">__..</text></g><g><title>entry_SYSCALL_64_after_hwframe (2,005,500 samples, 2.48%)</title><rect x="60.1853%" y="757" width="2.4756%" height="15" fill="rgb(211,146,34)" fg:x="48756248" fg:w="2005500"/><text x="60.4353%" y="767.50">en..</text></g><g><title>do_syscall_64 (2,005,500 samples, 2.48%)</title><rect x="60.1853%" y="741" width="2.4756%" height="15" fill="rgb(228,22,38)" fg:x="48756248" fg:w="2005500"/><text x="60.4353%" y="751.50">do..</text></g><g><title>__x64_sys_madvise (2,005,500 samples, 2.48%)</title><rect x="60.1853%" y="725" width="2.4756%" height="15" fill="rgb(235,168,5)" fg:x="48756248" fg:w="2005500"/><text x="60.4353%" y="735.50">__..</text></g><g><title>do_madvise (2,005,500 samples, 2.48%)</title><rect x="60.1853%" y="709" width="2.4756%" height="15" fill="rgb(221,155,16)" fg:x="48756248" fg:w="2005500"/><text x="60.4353%" y="719.50">do..</text></g><g><title>zap_page_range_single (2,005,500 samples, 2.48%)</title><rect x="60.1853%" y="693" width="2.4756%" height="15" fill="rgb(215,215,53)" fg:x="48756248" fg:w="2005500"/><text x="60.4353%" y="703.50">za..</text></g><g><title>unmap_page_range (1,955,804 samples, 2.41%)</title><rect x="60.2466%" y="677" width="2.4143%" height="15" fill="rgb(223,4,10)" fg:x="48805944" fg:w="1955804"/><text x="60.4966%" y="687.50">un..</text></g><g><title>page_remove_rmap (1,955,804 samples, 2.41%)</title><rect x="60.2466%" y="661" width="2.4143%" height="15" fill="rgb(234,103,6)" fg:x="48805944" fg:w="1955804"/><text x="60.4966%" y="671.50">pa..</text></g><g><title>entry_SYSCALL_64_after_hwframe (50,283 samples, 0.06%)</title><rect x="62.6609%" y="789" width="0.0621%" height="15" fill="rgb(227,97,0)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="799.50"></text></g><g><title>do_syscall_64 (50,283 samples, 0.06%)</title><rect x="62.6609%" y="773" width="0.0621%" height="15" fill="rgb(234,150,53)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="783.50"></text></g><g><title>__x64_sys_exit (50,283 samples, 0.06%)</title><rect x="62.6609%" y="757" width="0.0621%" height="15" fill="rgb(228,201,54)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="767.50"></text></g><g><title>do_exit (50,283 samples, 0.06%)</title><rect x="62.6609%" y="741" width="0.0621%" height="15" fill="rgb(222,22,37)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="751.50"></text></g><g><title>down_read (50,283 samples, 0.06%)</title><rect x="62.6609%" y="725" width="0.0621%" height="15" fill="rgb(237,53,32)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="735.50"></text></g><g><title>rwsem_down_read_slowpath (50,283 samples, 0.06%)</title><rect x="62.6609%" y="709" width="0.0621%" height="15" fill="rgb(233,25,53)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="719.50"></text></g><g><title>schedule_preempt_disabled (50,283 samples, 0.06%)</title><rect x="62.6609%" y="693" width="0.0621%" height="15" fill="rgb(210,40,34)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="703.50"></text></g><g><title>schedule (50,283 samples, 0.06%)</title><rect x="62.6609%" y="677" width="0.0621%" height="15" fill="rgb(241,220,44)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="687.50"></text></g><g><title>__schedule (50,283 samples, 0.06%)</title><rect x="62.6609%" y="661" width="0.0621%" height="15" fill="rgb(235,28,35)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="671.50"></text></g><g><title>finish_task_switch.isra.0 (50,283 samples, 0.06%)</title><rect x="62.6609%" y="645" width="0.0621%" height="15" fill="rgb(210,56,17)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="655.50"></text></g><g><title>__perf_event_task_sched_in (50,283 samples, 0.06%)</title><rect x="62.6609%" y="629" width="0.0621%" height="15" fill="rgb(224,130,29)" fg:x="50761748" fg:w="50283"/><text x="62.9109%" y="639.50"></text></g><g><title>__x64_sys_rseq (14,253 samples, 0.02%)</title><rect x="62.7229%" y="741" width="0.0176%" height="15" fill="rgb(235,212,8)" fg:x="50812031" fg:w="14253"/><text x="62.9729%" y="751.50"></text></g><g><title>rseq_register_current_thread (28,499 samples, 0.04%)</title><rect x="62.7229%" y="789" width="0.0352%" height="15" fill="rgb(223,33,50)" fg:x="50812031" fg:w="28499"/><text x="62.9729%" y="799.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28,499 samples, 0.04%)</title><rect x="62.7229%" y="773" width="0.0352%" height="15" fill="rgb(219,149,13)" fg:x="50812031" fg:w="28499"/><text x="62.9729%" y="783.50"></text></g><g><title>do_syscall_64 (28,499 samples, 0.04%)</title><rect x="62.7229%" y="757" width="0.0352%" height="15" fill="rgb(250,156,29)" fg:x="50812031" fg:w="28499"/><text x="62.9729%" y="767.50"></text></g><g><title>syscall_exit_to_user_mode (14,246 samples, 0.02%)</title><rect x="62.7405%" y="741" width="0.0176%" height="15" fill="rgb(216,193,19)" fg:x="50826284" fg:w="14246"/><text x="62.9905%" y="751.50"></text></g><g><title>exit_to_user_mode_prepare (14,246 samples, 0.02%)</title><rect x="62.7405%" y="725" width="0.0176%" height="15" fill="rgb(216,135,14)" fg:x="50826284" fg:w="14246"/><text x="62.9905%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (81,369 samples, 0.10%)</title><rect x="62.7581%" y="597" width="0.1004%" height="15" fill="rgb(241,47,5)" fg:x="50840530" fg:w="81369"/><text x="63.0081%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (81,369 samples, 0.10%)</title><rect x="62.7581%" y="581" width="0.1004%" height="15" fill="rgb(233,42,35)" fg:x="50840530" fg:w="81369"/><text x="63.0081%" y="591.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,534,779 samples, 14.24%)</title><rect x="63.3308%" y="581" width="14.2387%" height="15" fill="rgb(231,13,6)" fg:x="51304482" fg:w="11534779"/><text x="63.5808%" y="591.50">&lt;core::array::iter::In..</text></g><g><title>core::option::Option&lt;T&gt;::map (11,534,779 samples, 14.24%)</title><rect x="63.3308%" y="565" width="14.2387%" height="15" fill="rgb(207,181,40)" fg:x="51304482" fg:w="11534779"/><text x="63.5808%" y="575.50">core::option::Option&lt;T..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (11,534,779 samples, 14.24%)</title><rect x="63.3308%" y="549" width="14.2387%" height="15" fill="rgb(254,173,49)" fg:x="51304482" fg:w="11534779"/><text x="63.5808%" y="559.50">&lt;core::array::iter::In..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (11,534,779 samples, 14.24%)</title><rect x="63.3308%" y="533" width="14.2387%" height="15" fill="rgb(221,1,38)" fg:x="51304482" fg:w="11534779"/><text x="63.5808%" y="543.50">core::mem::maybe_unini..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (11,534,779 samples, 14.24%)</title><rect x="63.3308%" y="517" width="14.2387%" height="15" fill="rgb(206,124,46)" fg:x="51304482" fg:w="11534779"/><text x="63.5808%" y="527.50">core::ptr::const_ptr::..</text></g><g><title>core::ptr::read (11,534,779 samples, 14.24%)</title><rect x="63.3308%" y="501" width="14.2387%" height="15" fill="rgb(249,21,11)" fg:x="51304482" fg:w="11534779"/><text x="63.5808%" y="511.50">core::ptr::read</text></g><g><title>asm_sysvec_call_function (318,658 samples, 0.39%)</title><rect x="77.1761%" y="485" width="0.3934%" height="15" fill="rgb(222,201,40)" fg:x="62520603" fg:w="318658"/><text x="77.4261%" y="495.50"></text></g><g><title>srso_alias_return_thunk (318,658 samples, 0.39%)</title><rect x="77.1761%" y="469" width="0.3934%" height="15" fill="rgb(235,61,29)" fg:x="62520603" fg:w="318658"/><text x="77.4261%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (286,085 samples, 0.35%)</title><rect x="77.5695%" y="581" width="0.3531%" height="15" fill="rgb(219,207,3)" fg:x="62839261" fg:w="286085"/><text x="77.8195%" y="591.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (286,085 samples, 0.35%)</title><rect x="77.5695%" y="565" width="0.3531%" height="15" fill="rgb(222,56,46)" fg:x="62839261" fg:w="286085"/><text x="77.8195%" y="575.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (379,298 samples, 0.47%)</title><rect x="78.0236%" y="405" width="0.4682%" height="15" fill="rgb(239,76,54)" fg:x="63207147" fg:w="379298"/><text x="78.2736%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="581" width="2.9529%" height="15" fill="rgb(231,124,27)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="591.50">cor..</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="565" width="2.9529%" height="15" fill="rgb(249,195,6)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="575.50">&lt;f3..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="549" width="2.9529%" height="15" fill="rgb(237,174,47)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="559.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="533" width="2.9529%" height="15" fill="rgb(206,201,31)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="543.50">&lt;co..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="517" width="2.9529%" height="15" fill="rgb(231,57,52)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="527.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="501" width="2.9529%" height="15" fill="rgb(248,177,22)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="511.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="485" width="2.9529%" height="15" fill="rgb(215,211,37)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="495.50">cor..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="469" width="2.9529%" height="15" fill="rgb(241,128,51)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="479.50">cor..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="453" width="2.9529%" height="15" fill="rgb(227,165,31)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="463.50">&lt;co..</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (2,392,155 samples, 2.95%)</title><rect x="77.9226%" y="437" width="2.9529%" height="15" fill="rgb(228,167,24)" fg:x="63125346" fg:w="2392155"/><text x="78.1726%" y="447.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,310,354 samples, 2.85%)</title><rect x="78.0236%" y="421" width="2.8519%" height="15" fill="rgb(228,143,12)" fg:x="63207147" fg:w="2310354"/><text x="78.2736%" y="431.50">co..</text></g><g><title>wordle::squeeze::entropy_after::{{closure}} (1,931,056 samples, 2.38%)</title><rect x="78.4918%" y="405" width="2.3837%" height="15" fill="rgb(249,149,8)" fg:x="63586445" fg:w="1931056"/><text x="78.7418%" y="415.50">wo..</text></g><g><title>std::f32::&lt;impl f32&gt;::log2 (1,931,056 samples, 2.38%)</title><rect x="78.4918%" y="389" width="2.3837%" height="15" fill="rgb(243,35,44)" fg:x="63586445" fg:w="1931056"/><text x="78.7418%" y="399.50">st..</text></g><g><title>__log2f_fma (1,931,056 samples, 2.38%)</title><rect x="78.4918%" y="373" width="2.3837%" height="15" fill="rgb(246,89,9)" fg:x="63586445" fg:w="1931056"/><text x="78.7418%" y="383.50">__..</text></g><g><title>&lt;core::core_simd::masks::Mask&lt;T,_&gt; as core::ops::bit::BitAnd&gt;::bitand (4,128,188 samples, 5.10%)</title><rect x="80.8755%" y="565" width="5.0959%" height="15" fill="rgb(233,213,13)" fg:x="65517501" fg:w="4128188"/><text x="81.1255%" y="575.50">&lt;core:..</text></g><g><title>&lt;core::core_simd::masks::mask_impl::Mask&lt;T,_&gt; as core::ops::bit::BitAnd&gt;::bitand (4,128,188 samples, 5.10%)</title><rect x="80.8755%" y="549" width="5.0959%" height="15" fill="rgb(233,141,41)" fg:x="65517501" fg:w="4128188"/><text x="81.1255%" y="559.50">&lt;core:..</text></g><g><title>&lt;core::core_simd::vector::Simd&lt;u32,_&gt; as core::core_simd::simd::cmp::eq::SimdPartialEq&gt;::simd_eq (263,075 samples, 0.32%)</title><rect x="85.9714%" y="565" width="0.3247%" height="15" fill="rgb(239,167,4)" fg:x="69645689" fg:w="263075"/><text x="86.2214%" y="575.50"></text></g><g><title>&lt;core::core_simd::vector::Simd&lt;u32,_&gt; as core::core_simd::simd::cmp::ord::SimdPartialOrd&gt;::simd_lt (1,014,952 samples, 1.25%)</title><rect x="86.2962%" y="565" width="1.2529%" height="15" fill="rgb(209,217,16)" fg:x="69908764" fg:w="1014952"/><text x="86.5462%" y="575.50"></text></g><g><title>core::core_simd::ops::&lt;impl core::ops::bit::Shl for core::core_simd::vector::Simd&lt;u32,_&gt;&gt;::shl (1,962,317 samples, 2.42%)</title><rect x="87.5490%" y="565" width="2.4223%" height="15" fill="rgb(219,88,35)" fg:x="70923716" fg:w="1962317"/><text x="87.7990%" y="575.50">co..</text></g><g><title>core::core_simd::ops::&lt;impl core::ops::bit::BitAnd for core::core_simd::vector::Simd&lt;u32,_&gt;&gt;::bitand (1,866,403 samples, 2.30%)</title><rect x="87.6674%" y="549" width="2.3039%" height="15" fill="rgb(220,193,23)" fg:x="71019630" fg:w="1866403"/><text x="87.9174%" y="559.50">c..</text></g><g><title>core::core_simd::ops::assign::&lt;impl core::ops::arith::AddAssign&lt;U&gt; for core::core_simd::vector::Simd&lt;T,_&gt;&gt;::add_assign (219,680 samples, 0.27%)</title><rect x="89.9713%" y="565" width="0.2712%" height="15" fill="rgb(230,90,52)" fg:x="72886033" fg:w="219680"/><text x="90.2213%" y="575.50"></text></g><g><title>core::core_simd::ops::&lt;impl core::ops::arith::Add for core::core_simd::vector::Simd&lt;u32,_&gt;&gt;::add (219,680 samples, 0.27%)</title><rect x="89.9713%" y="549" width="0.2712%" height="15" fill="rgb(252,106,19)" fg:x="72886033" fg:w="219680"/><text x="90.2213%" y="559.50"></text></g><g><title>core::core_simd::ops::assign::&lt;impl core::ops::arith::SubAssign&lt;U&gt; for core::core_simd::vector::Simd&lt;T,_&gt;&gt;::sub_assign (1,512,579 samples, 1.87%)</title><rect x="90.2425%" y="565" width="1.8671%" height="15" fill="rgb(206,74,20)" fg:x="73105713" fg:w="1512579"/><text x="90.4925%" y="575.50">c..</text></g><g><title>core::core_simd::ops::&lt;impl core::ops::arith::Sub for core::core_simd::vector::Simd&lt;u32,_&gt;&gt;::sub (1,512,579 samples, 1.87%)</title><rect x="90.2425%" y="549" width="1.8671%" height="15" fill="rgb(230,138,44)" fg:x="73105713" fg:w="1512579"/><text x="90.4925%" y="559.50">c..</text></g><g><title>core::core_simd::ops::assign::&lt;impl core::ops::bit::BitOrAssign&lt;U&gt; for core::core_simd::vector::Simd&lt;T,_&gt;&gt;::bitor_assign (86,350 samples, 0.11%)</title><rect x="92.1097%" y="565" width="0.1066%" height="15" fill="rgb(235,182,43)" fg:x="74618292" fg:w="86350"/><text x="92.3597%" y="575.50"></text></g><g><title>core::core_simd::ops::&lt;impl core::ops::bit::BitOr for core::core_simd::vector::Simd&lt;u32,_&gt;&gt;::bitor (86,350 samples, 0.11%)</title><rect x="92.1097%" y="549" width="0.1066%" height="15" fill="rgb(242,16,51)" fg:x="74618292" fg:w="86350"/><text x="92.3597%" y="559.50"></text></g><g><title>std::panic::catch_unwind (25,827,714 samples, 31.88%)</title><rect x="62.7581%" y="709" width="31.8820%" height="15" fill="rgb(248,9,4)" fg:x="50840530" fg:w="25827714"/><text x="63.0081%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (25,827,714 samples, 31.88%)</title><rect x="62.7581%" y="693" width="31.8820%" height="15" fill="rgb(210,31,22)" fg:x="50840530" fg:w="25827714"/><text x="63.0081%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (25,827,714 samples, 31.88%)</title><rect x="62.7581%" y="677" width="31.8820%" height="15" fill="rgb(239,54,39)" fg:x="50840530" fg:w="25827714"/><text x="63.0081%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (25,827,714 samples, 31.88%)</title><rect x="62.7581%" y="661" width="31.8820%" height="15" fill="rgb(230,99,41)" fg:x="50840530" fg:w="25827714"/><text x="63.0081%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as co..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (25,827,714 samples, 31.88%)</title><rect x="62.7581%" y="645" width="31.8820%" height="15" fill="rgb(253,106,12)" fg:x="50840530" fg:w="25827714"/><text x="63.0081%" y="655.50">std::thread::Builder::spawn_unchecked_::{{closure}}:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (25,827,714 samples, 31.88%)</title><rect x="62.7581%" y="629" width="31.8820%" height="15" fill="rgb(213,46,41)" fg:x="50840530" fg:w="25827714"/><text x="63.0081%" y="639.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>flamegraph_scaling::benchtime::{{closure}}::{{closure}}::{{closure}}::{{closure}} (25,827,714 samples, 31.88%)</title><rect x="62.7581%" y="613" width="31.8820%" height="15" fill="rgb(215,133,35)" fg:x="50840530" fg:w="25827714"/><text x="63.0081%" y="623.50">flamegraph_scaling::benchtime::{{closure}}::{{closur..</text></g><g><title>wordle::squeeze::entropy_after (25,746,345 samples, 31.78%)</title><rect x="62.8586%" y="597" width="31.7816%" height="15" fill="rgb(213,28,5)" fg:x="50921899" fg:w="25746345"/><text x="63.1086%" y="607.50">wordle::squeeze::entropy_after</text></g><g><title>wordle::squeeze::gradel (11,150,743 samples, 13.76%)</title><rect x="80.8755%" y="581" width="13.7646%" height="15" fill="rgb(215,77,49)" fg:x="65517501" fg:w="11150743"/><text x="81.1255%" y="591.50">wordle::squeeze::grad..</text></g><g><title>core::core_simd::select::&lt;impl core::core_simd::masks::Mask&lt;T,_&gt;&gt;::select (1,963,602 samples, 2.42%)</title><rect x="92.2162%" y="565" width="2.4239%" height="15" fill="rgb(248,100,22)" fg:x="74704642" fg:w="1963602"/><text x="92.4662%" y="575.50">co..</text></g><g><title>std::thread::Thread::cname (83,603 samples, 0.10%)</title><rect x="94.6401%" y="709" width="0.1032%" height="15" fill="rgb(208,67,9)" fg:x="76668244" fg:w="83603"/><text x="94.8901%" y="719.50"></text></g><g><title>std::thread::thread_name_string::&lt;impl std::thread::ThreadName&gt;::as_cstr (83,603 samples, 0.10%)</title><rect x="94.6401%" y="693" width="0.1032%" height="15" fill="rgb(219,133,21)" fg:x="76668244" fg:w="83603"/><text x="94.8901%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (26,066,968 samples, 32.18%)</title><rect x="62.7581%" y="773" width="32.1774%" height="15" fill="rgb(246,46,29)" fg:x="50840530" fg:w="26066968"/><text x="63.0081%" y="783.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (26,066,968 samples, 32.18%)</title><rect x="62.7581%" y="757" width="32.1774%" height="15" fill="rgb(246,185,52)" fg:x="50840530" fg:w="26066968"/><text x="63.0081%" y="767.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (26,066,968 samples, 32.18%)</title><rect x="62.7581%" y="741" width="32.1774%" height="15" fill="rgb(252,136,11)" fg:x="50840530" fg:w="26066968"/><text x="63.0081%" y="751.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (26,066,968 samples, 32.18%)</title><rect x="62.7581%" y="725" width="32.1774%" height="15" fill="rgb(219,138,53)" fg:x="50840530" fg:w="26066968"/><text x="63.0081%" y="735.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::thread::set_current (155,651 samples, 0.19%)</title><rect x="94.7433%" y="709" width="0.1921%" height="15" fill="rgb(211,51,23)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (155,651 samples, 0.19%)</title><rect x="94.7433%" y="693" width="0.1921%" height="15" fill="rgb(247,221,28)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (155,651 samples, 0.19%)</title><rect x="94.7433%" y="677" width="0.1921%" height="15" fill="rgb(251,222,45)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (155,651 samples, 0.19%)</title><rect x="94.7433%" y="661" width="0.1921%" height="15" fill="rgb(217,162,53)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="671.50"></text></g><g><title>std::thread::CURRENT::{{constant}}::{{closure}} (155,651 samples, 0.19%)</title><rect x="94.7433%" y="645" width="0.1921%" height="15" fill="rgb(229,93,14)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="655.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (155,651 samples, 0.19%)</title><rect x="94.7433%" y="629" width="0.1921%" height="15" fill="rgb(209,67,49)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="639.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::initialize (155,651 samples, 0.19%)</title><rect x="94.7433%" y="613" width="0.1921%" height="15" fill="rgb(213,87,29)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="623.50"></text></g><g><title>__cxa_thread_atexit_impl (155,651 samples, 0.19%)</title><rect x="94.7433%" y="597" width="0.1921%" height="15" fill="rgb(205,151,52)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (155,651 samples, 0.19%)</title><rect x="94.7433%" y="581" width="0.1921%" height="15" fill="rgb(253,215,39)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="591.50"></text></g><g><title>lll_mutex_unlock_optimized (155,651 samples, 0.19%)</title><rect x="94.7433%" y="565" width="0.1921%" height="15" fill="rgb(221,220,41)" fg:x="76751847" fg:w="155651"/><text x="94.9933%" y="575.50"></text></g><g><title>__x64_sys_sigaltstack (72,509 samples, 0.09%)</title><rect x="94.9711%" y="693" width="0.0895%" height="15" fill="rgb(218,133,21)" fg:x="76936325" fg:w="72509"/><text x="95.2211%" y="703.50"></text></g><g><title>_copy_from_user (72,509 samples, 0.09%)</title><rect x="94.9711%" y="677" width="0.0895%" height="15" fill="rgb(221,193,43)" fg:x="76936325" fg:w="72509"/><text x="95.2211%" y="687.50"></text></g><g><title>__GI_sigaltstack (156,015 samples, 0.19%)</title><rect x="94.9371%" y="741" width="0.1926%" height="15" fill="rgb(240,128,52)" fg:x="76908831" fg:w="156015"/><text x="95.1871%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (156,015 samples, 0.19%)</title><rect x="94.9371%" y="725" width="0.1926%" height="15" fill="rgb(253,114,12)" fg:x="76908831" fg:w="156015"/><text x="95.1871%" y="735.50"></text></g><g><title>do_syscall_64 (128,521 samples, 0.16%)</title><rect x="94.9711%" y="709" width="0.1586%" height="15" fill="rgb(215,223,47)" fg:x="76936325" fg:w="128521"/><text x="95.2211%" y="719.50"></text></g><g><title>x64_sys_call (56,012 samples, 0.07%)</title><rect x="95.0606%" y="693" width="0.0691%" height="15" fill="rgb(248,225,23)" fg:x="77008834" fg:w="56012"/><text x="95.3106%" y="703.50"></text></g><g><title>__GI___mmap64 (25,374 samples, 0.03%)</title><rect x="95.1297%" y="597" width="0.0313%" height="15" fill="rgb(250,108,0)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="607.50"></text></g><g><title>__GI___mmap64 (25,374 samples, 0.03%)</title><rect x="95.1297%" y="581" width="0.0313%" height="15" fill="rgb(228,208,7)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (25,374 samples, 0.03%)</title><rect x="95.1297%" y="565" width="0.0313%" height="15" fill="rgb(244,45,10)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="575.50"></text></g><g><title>do_syscall_64 (25,374 samples, 0.03%)</title><rect x="95.1297%" y="549" width="0.0313%" height="15" fill="rgb(207,125,25)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="559.50"></text></g><g><title>vm_mmap_pgoff (25,374 samples, 0.03%)</title><rect x="95.1297%" y="533" width="0.0313%" height="15" fill="rgb(210,195,18)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="543.50"></text></g><g><title>down_write_killable (25,374 samples, 0.03%)</title><rect x="95.1297%" y="517" width="0.0313%" height="15" fill="rgb(249,80,12)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="527.50"></text></g><g><title>rwsem_down_write_slowpath (25,374 samples, 0.03%)</title><rect x="95.1297%" y="501" width="0.0313%" height="15" fill="rgb(221,65,9)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="511.50"></text></g><g><title>schedule (25,374 samples, 0.03%)</title><rect x="95.1297%" y="485" width="0.0313%" height="15" fill="rgb(235,49,36)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="495.50"></text></g><g><title>__schedule (25,374 samples, 0.03%)</title><rect x="95.1297%" y="469" width="0.0313%" height="15" fill="rgb(225,32,20)" fg:x="77064846" fg:w="25374"/><text x="95.3797%" y="479.50"></text></g><g><title>pick_next_task_fair (24,701 samples, 0.03%)</title><rect x="95.1305%" y="453" width="0.0305%" height="15" fill="rgb(215,141,46)" fg:x="77065519" fg:w="24701"/><text x="95.3805%" y="463.50"></text></g><g><title>newidle_balance (24,701 samples, 0.03%)</title><rect x="95.1305%" y="437" width="0.0305%" height="15" fill="rgb(250,160,47)" fg:x="77065519" fg:w="24701"/><text x="95.3805%" y="447.50"></text></g><g><title>__rcu_read_unlock (24,701 samples, 0.03%)</title><rect x="95.1305%" y="421" width="0.0305%" height="15" fill="rgb(216,222,40)" fg:x="77065519" fg:w="24701"/><text x="95.3805%" y="431.50"></text></g><g><title>do_mas_munmap (29,094 samples, 0.04%)</title><rect x="95.4559%" y="517" width="0.0359%" height="15" fill="rgb(234,217,39)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="527.50"></text></g><g><title>do_mas_align_munmap (29,094 samples, 0.04%)</title><rect x="95.4559%" y="501" width="0.0359%" height="15" fill="rgb(207,178,40)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="511.50"></text></g><g><title>unmap_region (29,094 samples, 0.04%)</title><rect x="95.4559%" y="485" width="0.0359%" height="15" fill="rgb(221,136,13)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="495.50"></text></g><g><title>lru_add_drain (29,094 samples, 0.04%)</title><rect x="95.4559%" y="469" width="0.0359%" height="15" fill="rgb(249,199,10)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="479.50"></text></g><g><title>lru_add_drain_cpu (29,094 samples, 0.04%)</title><rect x="95.4559%" y="453" width="0.0359%" height="15" fill="rgb(249,222,13)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="463.50"></text></g><g><title>folio_batch_move_lru (29,094 samples, 0.04%)</title><rect x="95.4559%" y="437" width="0.0359%" height="15" fill="rgb(244,185,38)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="447.50"></text></g><g><title>folio_lruvec_lock_irqsave (29,094 samples, 0.04%)</title><rect x="95.4559%" y="421" width="0.0359%" height="15" fill="rgb(236,202,9)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="431.50"></text></g><g><title>_raw_spin_lock_irqsave (29,094 samples, 0.04%)</title><rect x="95.4559%" y="405" width="0.0359%" height="15" fill="rgb(250,229,37)" fg:x="77329129" fg:w="29094"/><text x="95.7059%" y="415.50"></text></g><g><title>down_write_killable (128,999 samples, 0.16%)</title><rect x="95.4919%" y="517" width="0.1592%" height="15" fill="rgb(206,174,23)" fg:x="77358223" fg:w="128999"/><text x="95.7419%" y="527.50"></text></g><g><title>rwsem_down_write_slowpath (128,999 samples, 0.16%)</title><rect x="95.4919%" y="501" width="0.1592%" height="15" fill="rgb(211,33,43)" fg:x="77358223" fg:w="128999"/><text x="95.7419%" y="511.50"></text></g><g><title>__GI_munmap (576,139 samples, 0.71%)</title><rect x="95.1610%" y="597" width="0.7112%" height="15" fill="rgb(245,58,50)" fg:x="77090220" fg:w="576139"/><text x="95.4110%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (576,139 samples, 0.71%)</title><rect x="95.1610%" y="581" width="0.7112%" height="15" fill="rgb(244,68,36)" fg:x="77090220" fg:w="576139"/><text x="95.4110%" y="591.50"></text></g><g><title>do_syscall_64 (576,139 samples, 0.71%)</title><rect x="95.1610%" y="565" width="0.7112%" height="15" fill="rgb(232,229,15)" fg:x="77090220" fg:w="576139"/><text x="95.4110%" y="575.50"></text></g><g><title>__x64_sys_munmap (576,139 samples, 0.71%)</title><rect x="95.1610%" y="549" width="0.7112%" height="15" fill="rgb(254,30,23)" fg:x="77090220" fg:w="576139"/><text x="95.4110%" y="559.50"></text></g><g><title>__vm_munmap (576,139 samples, 0.71%)</title><rect x="95.1610%" y="533" width="0.7112%" height="15" fill="rgb(235,160,14)" fg:x="77090220" fg:w="576139"/><text x="95.4110%" y="543.50"></text></g><g><title>up_read (179,137 samples, 0.22%)</title><rect x="95.6511%" y="517" width="0.2211%" height="15" fill="rgb(212,155,44)" fg:x="77487222" fg:w="179137"/><text x="95.9011%" y="527.50"></text></g><g><title>rwsem_wake.isra.0 (179,137 samples, 0.22%)</title><rect x="95.6511%" y="501" width="0.2211%" height="15" fill="rgb(226,2,50)" fg:x="77487222" fg:w="179137"/><text x="95.9011%" y="511.50"></text></g><g><title>_raw_spin_lock_irqsave (179,137 samples, 0.22%)</title><rect x="95.6511%" y="485" width="0.2211%" height="15" fill="rgb(234,177,6)" fg:x="77487222" fg:w="179137"/><text x="95.9011%" y="495.50"></text></g><g><title>arena_get2 (790,573 samples, 0.98%)</title><rect x="95.1297%" y="645" width="0.9759%" height="15" fill="rgb(217,24,9)" fg:x="77064846" fg:w="790573"/><text x="95.3797%" y="655.50"></text></g><g><title>_int_new_arena (790,573 samples, 0.98%)</title><rect x="95.1297%" y="629" width="0.9759%" height="15" fill="rgb(220,13,46)" fg:x="77064846" fg:w="790573"/><text x="95.3797%" y="639.50"></text></g><g><title>alloc_new_heap (790,573 samples, 0.98%)</title><rect x="95.1297%" y="613" width="0.9759%" height="15" fill="rgb(239,221,27)" fg:x="77064846" fg:w="790573"/><text x="95.3797%" y="623.50"></text></g><g><title>asm_exc_page_fault (189,060 samples, 0.23%)</title><rect x="95.8722%" y="597" width="0.2334%" height="15" fill="rgb(222,198,25)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="607.50"></text></g><g><title>exc_page_fault (189,060 samples, 0.23%)</title><rect x="95.8722%" y="581" width="0.2334%" height="15" fill="rgb(211,99,13)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="591.50"></text></g><g><title>do_user_addr_fault (189,060 samples, 0.23%)</title><rect x="95.8722%" y="565" width="0.2334%" height="15" fill="rgb(232,111,31)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="575.50"></text></g><g><title>handle_mm_fault (189,060 samples, 0.23%)</title><rect x="95.8722%" y="549" width="0.2334%" height="15" fill="rgb(245,82,37)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="559.50"></text></g><g><title>__handle_mm_fault (189,060 samples, 0.23%)</title><rect x="95.8722%" y="533" width="0.2334%" height="15" fill="rgb(227,149,46)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="543.50"></text></g><g><title>__pte_alloc (189,060 samples, 0.23%)</title><rect x="95.8722%" y="517" width="0.2334%" height="15" fill="rgb(218,36,50)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="527.50"></text></g><g><title>pte_alloc_one (189,060 samples, 0.23%)</title><rect x="95.8722%" y="501" width="0.2334%" height="15" fill="rgb(226,80,48)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="511.50"></text></g><g><title>__alloc_pages (189,060 samples, 0.23%)</title><rect x="95.8722%" y="485" width="0.2334%" height="15" fill="rgb(238,224,15)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="495.50"></text></g><g><title>get_page_from_freelist (189,060 samples, 0.23%)</title><rect x="95.8722%" y="469" width="0.2334%" height="15" fill="rgb(241,136,10)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="479.50"></text></g><g><title>__list_del_entry_valid (189,060 samples, 0.23%)</title><rect x="95.8722%" y="453" width="0.2334%" height="15" fill="rgb(208,32,45)" fg:x="77666359" fg:w="189060"/><text x="96.1222%" y="463.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (834,793 samples, 1.03%)</title><rect x="95.1297%" y="741" width="1.0305%" height="15" fill="rgb(207,135,9)" fg:x="77064846" fg:w="834793"/><text x="95.3797%" y="751.50"></text></g><g><title>__pthread_getattr_np (834,793 samples, 1.03%)</title><rect x="95.1297%" y="725" width="1.0305%" height="15" fill="rgb(206,86,44)" fg:x="77064846" fg:w="834793"/><text x="95.3797%" y="735.50"></text></g><g><title>__GI___libc_malloc (834,793 samples, 1.03%)</title><rect x="95.1297%" y="709" width="1.0305%" height="15" fill="rgb(245,177,15)" fg:x="77064846" fg:w="834793"/><text x="95.3797%" y="719.50"></text></g><g><title>tcache_init (834,793 samples, 1.03%)</title><rect x="95.1297%" y="693" width="1.0305%" height="15" fill="rgb(206,64,50)" fg:x="77064846" fg:w="834793"/><text x="95.3797%" y="703.50"></text></g><g><title>tcache_init (834,793 samples, 1.03%)</title><rect x="95.1297%" y="677" width="1.0305%" height="15" fill="rgb(234,36,40)" fg:x="77064846" fg:w="834793"/><text x="95.3797%" y="687.50"></text></g><g><title>arena_get2 (834,793 samples, 1.03%)</title><rect x="95.1297%" y="661" width="1.0305%" height="15" fill="rgb(213,64,8)" fg:x="77064846" fg:w="834793"/><text x="95.3797%" y="671.50"></text></g><g><title>get_free_list (44,220 samples, 0.05%)</title><rect x="96.1056%" y="645" width="0.0546%" height="15" fill="rgb(210,75,36)" fg:x="77855419" fg:w="44220"/><text x="96.3556%" y="655.50"></text></g><g><title>get_unmapped_area (65,742 samples, 0.08%)</title><rect x="96.1602%" y="629" width="0.0812%" height="15" fill="rgb(229,88,21)" fg:x="77899639" fg:w="65742"/><text x="96.4102%" y="639.50"></text></g><g><title>arch_get_unmapped_area_topdown (65,742 samples, 0.08%)</title><rect x="96.1602%" y="613" width="0.0812%" height="15" fill="rgb(252,204,47)" fg:x="77899639" fg:w="65742"/><text x="96.4102%" y="623.50"></text></g><g><title>vm_unmapped_area (34,095 samples, 0.04%)</title><rect x="96.1993%" y="597" width="0.0421%" height="15" fill="rgb(208,77,27)" fg:x="77931286" fg:w="34095"/><text x="96.4493%" y="607.50"></text></g><g><title>mas_empty_area_rev (26,939 samples, 0.03%)</title><rect x="96.2081%" y="581" width="0.0333%" height="15" fill="rgb(221,76,26)" fg:x="77938442" fg:w="26939"/><text x="96.4581%" y="591.50"></text></g><g><title>perf_event_mmap (158,147 samples, 0.20%)</title><rect x="96.2413%" y="613" width="0.1952%" height="15" fill="rgb(225,139,18)" fg:x="77965381" fg:w="158147"/><text x="96.4913%" y="623.50"></text></g><g><title>perf_iterate_sb (158,147 samples, 0.20%)</title><rect x="96.2413%" y="597" width="0.1952%" height="15" fill="rgb(230,137,11)" fg:x="77965381" fg:w="158147"/><text x="96.4913%" y="607.50"></text></g><g><title>perf_iterate_ctx (158,147 samples, 0.20%)</title><rect x="96.2413%" y="581" width="0.1952%" height="15" fill="rgb(212,28,1)" fg:x="77965381" fg:w="158147"/><text x="96.4913%" y="591.50"></text></g><g><title>do_mmap (286,243 samples, 0.35%)</title><rect x="96.1602%" y="645" width="0.3533%" height="15" fill="rgb(248,164,17)" fg:x="77899639" fg:w="286243"/><text x="96.4102%" y="655.50"></text></g><g><title>mmap_region (220,501 samples, 0.27%)</title><rect x="96.2413%" y="629" width="0.2722%" height="15" fill="rgb(222,171,42)" fg:x="77965381" fg:w="220501"/><text x="96.4913%" y="639.50"></text></g><g><title>vma_expand (62,354 samples, 0.08%)</title><rect x="96.4366%" y="613" width="0.0770%" height="15" fill="rgb(243,84,45)" fg:x="78123528" fg:w="62354"/><text x="96.6866%" y="623.50"></text></g><g><title>vma_adjust_trans_huge (62,354 samples, 0.08%)</title><rect x="96.4366%" y="597" width="0.0770%" height="15" fill="rgb(252,49,23)" fg:x="78123528" fg:w="62354"/><text x="96.6866%" y="607.50"></text></g><g><title>rwsem_spin_on_owner (46,171 samples, 0.06%)</title><rect x="96.5706%" y="613" width="0.0570%" height="15" fill="rgb(215,19,7)" fg:x="78232097" fg:w="46171"/><text x="96.8206%" y="623.50"></text></g><g><title>down_write_killable (93,570 samples, 0.12%)</title><rect x="96.5135%" y="645" width="0.1155%" height="15" fill="rgb(238,81,41)" fg:x="78185882" fg:w="93570"/><text x="96.7635%" y="655.50"></text></g><g><title>rwsem_down_write_slowpath (93,570 samples, 0.12%)</title><rect x="96.5135%" y="629" width="0.1155%" height="15" fill="rgb(210,199,37)" fg:x="78185882" fg:w="93570"/><text x="96.7635%" y="639.50"></text></g><g><title>__GI___mmap64 (464,964 samples, 0.57%)</title><rect x="96.1602%" y="725" width="0.5740%" height="15" fill="rgb(244,192,49)" fg:x="77899639" fg:w="464964"/><text x="96.4102%" y="735.50"></text></g><g><title>__GI___mmap64 (464,964 samples, 0.57%)</title><rect x="96.1602%" y="709" width="0.5740%" height="15" fill="rgb(226,211,11)" fg:x="77899639" fg:w="464964"/><text x="96.4102%" y="719.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (464,964 samples, 0.57%)</title><rect x="96.1602%" y="693" width="0.5740%" height="15" fill="rgb(236,162,54)" fg:x="77899639" fg:w="464964"/><text x="96.4102%" y="703.50"></text></g><g><title>do_syscall_64 (464,964 samples, 0.57%)</title><rect x="96.1602%" y="677" width="0.5740%" height="15" fill="rgb(220,229,9)" fg:x="77899639" fg:w="464964"/><text x="96.4102%" y="687.50"></text></g><g><title>vm_mmap_pgoff (464,964 samples, 0.57%)</title><rect x="96.1602%" y="661" width="0.5740%" height="15" fill="rgb(250,87,22)" fg:x="77899639" fg:w="464964"/><text x="96.4102%" y="671.50"></text></g><g><title>rwsem_wake.isra.0 (85,151 samples, 0.11%)</title><rect x="96.6290%" y="645" width="0.1051%" height="15" fill="rgb(239,43,17)" fg:x="78279452" fg:w="85151"/><text x="96.8790%" y="655.50"></text></g><g><title>wake_up_q (85,151 samples, 0.11%)</title><rect x="96.6290%" y="629" width="0.1051%" height="15" fill="rgb(231,177,25)" fg:x="78279452" fg:w="85151"/><text x="96.8790%" y="639.50"></text></g><g><title>try_to_wake_up (85,151 samples, 0.11%)</title><rect x="96.6290%" y="613" width="0.1051%" height="15" fill="rgb(219,179,1)" fg:x="78279452" fg:w="85151"/><text x="96.8790%" y="623.50"></text></g><g><title>select_task_rq_fair (85,151 samples, 0.11%)</title><rect x="96.6290%" y="597" width="0.1051%" height="15" fill="rgb(238,219,53)" fg:x="78279452" fg:w="85151"/><text x="96.8790%" y="607.50"></text></g><g><title>osq_lock (258,185 samples, 0.32%)</title><rect x="97.2852%" y="613" width="0.3187%" height="15" fill="rgb(232,167,36)" fg:x="78810988" fg:w="258185"/><text x="97.5352%" y="623.50"></text></g><g><title>osq_unlock (98,470 samples, 0.12%)</title><rect x="97.6039%" y="613" width="0.1216%" height="15" fill="rgb(244,19,51)" fg:x="79069173" fg:w="98470"/><text x="97.8539%" y="623.50"></text></g><g><title>down_write_killable (1,025,692 samples, 1.27%)</title><rect x="96.8872%" y="645" width="1.2661%" height="15" fill="rgb(224,6,22)" fg:x="78488622" fg:w="1025692"/><text x="97.1372%" y="655.50"></text></g><g><title>rwsem_down_write_slowpath (1,025,692 samples, 1.27%)</title><rect x="96.8872%" y="629" width="1.2661%" height="15" fill="rgb(224,145,5)" fg:x="78488622" fg:w="1025692"/><text x="97.1372%" y="639.50"></text></g><g><title>rwsem_spin_on_owner (346,671 samples, 0.43%)</title><rect x="97.7254%" y="613" width="0.4279%" height="15" fill="rgb(234,130,49)" fg:x="79167643" fg:w="346671"/><text x="97.9754%" y="623.50"></text></g><g><title>___slab_alloc (199,903 samples, 0.25%)</title><rect x="98.4637%" y="549" width="0.2468%" height="15" fill="rgb(254,6,2)" fg:x="79765716" fg:w="199903"/><text x="98.7137%" y="559.50"></text></g><g><title>get_partial_node.part.0 (80,784 samples, 0.10%)</title><rect x="98.6107%" y="533" width="0.0997%" height="15" fill="rgb(208,96,46)" fg:x="79884835" fg:w="80784"/><text x="98.8607%" y="543.50"></text></g><g><title>mas_preallocate (541,482 samples, 0.67%)</title><rect x="98.1534%" y="597" width="0.6684%" height="15" fill="rgb(239,3,39)" fg:x="79514314" fg:w="541482"/><text x="98.4034%" y="607.50"></text></g><g><title>mas_alloc_nodes (541,482 samples, 0.67%)</title><rect x="98.1534%" y="581" width="0.6684%" height="15" fill="rgb(233,210,1)" fg:x="79514314" fg:w="541482"/><text x="98.4034%" y="591.50"></text></g><g><title>kmem_cache_alloc_bulk (541,482 samples, 0.67%)</title><rect x="98.1534%" y="565" width="0.6684%" height="15" fill="rgb(244,137,37)" fg:x="79514314" fg:w="541482"/><text x="98.4034%" y="575.50"></text></g><g><title>srso_alias_return_thunk (90,177 samples, 0.11%)</title><rect x="98.7105%" y="549" width="0.1113%" height="15" fill="rgb(240,136,2)" fg:x="79965619" fg:w="90177"/><text x="98.9605%" y="559.50"></text></g><g><title>srso_alias_safe_ret (90,177 samples, 0.11%)</title><rect x="98.7105%" y="533" width="0.1113%" height="15" fill="rgb(239,18,37)" fg:x="79965619" fg:w="90177"/><text x="98.9605%" y="543.50"></text></g><g><title>__vma_adjust (606,807 samples, 0.75%)</title><rect x="98.1534%" y="613" width="0.7490%" height="15" fill="rgb(218,185,22)" fg:x="79514314" fg:w="606807"/><text x="98.4034%" y="623.50"></text></g><g><title>mt_find (65,325 samples, 0.08%)</title><rect x="98.8218%" y="597" width="0.0806%" height="15" fill="rgb(225,218,4)" fg:x="80055796" fg:w="65325"/><text x="99.0718%" y="607.50"></text></g><g><title>mtree_range_walk (65,325 samples, 0.08%)</title><rect x="98.8218%" y="581" width="0.0806%" height="15" fill="rgb(230,182,32)" fg:x="80055796" fg:w="65325"/><text x="99.0718%" y="591.50"></text></g><g><title>__split_vma (681,292 samples, 0.84%)</title><rect x="98.1534%" y="629" width="0.8410%" height="15" fill="rgb(242,56,43)" fg:x="79514314" fg:w="681292"/><text x="98.4034%" y="639.50"></text></g><g><title>anon_vma_clone (74,485 samples, 0.09%)</title><rect x="98.9024%" y="613" width="0.0919%" height="15" fill="rgb(233,99,24)" fg:x="80121121" fg:w="74485"/><text x="99.1524%" y="623.50"></text></g><g><title>kmem_cache_alloc (74,485 samples, 0.09%)</title><rect x="98.9024%" y="597" width="0.0919%" height="15" fill="rgb(234,209,42)" fg:x="80121121" fg:w="74485"/><text x="99.1524%" y="607.50"></text></g><g><title>get_obj_cgroup_from_current (74,485 samples, 0.09%)</title><rect x="98.9024%" y="581" width="0.0919%" height="15" fill="rgb(227,7,12)" fg:x="80121121" fg:w="74485"/><text x="99.1524%" y="591.50"></text></g><g><title>__get_obj_cgroup_from_memcg (74,485 samples, 0.09%)</title><rect x="98.9024%" y="565" width="0.0919%" height="15" fill="rgb(245,203,43)" fg:x="80121121" fg:w="74485"/><text x="99.1524%" y="575.50"></text></g><g><title>srso_alias_return_thunk (74,485 samples, 0.09%)</title><rect x="98.9024%" y="549" width="0.0919%" height="15" fill="rgb(238,205,33)" fg:x="80121121" fg:w="74485"/><text x="99.1524%" y="559.50"></text></g><g><title>change_protection (74,326 samples, 0.09%)</title><rect x="98.9944%" y="629" width="0.0917%" height="15" fill="rgb(231,56,7)" fg:x="80195606" fg:w="74326"/><text x="99.2444%" y="639.50"></text></g><g><title>mprotect_fixup (906,177 samples, 1.12%)</title><rect x="98.1534%" y="645" width="1.1186%" height="15" fill="rgb(244,186,29)" fg:x="79514314" fg:w="906177"/><text x="98.4034%" y="655.50"></text></g><g><title>perf_event_mmap (150,559 samples, 0.19%)</title><rect x="99.0861%" y="629" width="0.1859%" height="15" fill="rgb(234,111,31)" fg:x="80269932" fg:w="150559"/><text x="99.3361%" y="639.50"></text></g><g><title>perf_iterate_sb (71,897 samples, 0.09%)</title><rect x="99.1832%" y="613" width="0.0888%" height="15" fill="rgb(241,149,10)" fg:x="80348594" fg:w="71897"/><text x="99.4332%" y="623.50"></text></g><g><title>perf_iterate_ctx (71,897 samples, 0.09%)</title><rect x="99.1832%" y="597" width="0.0888%" height="15" fill="rgb(249,206,44)" fg:x="80348594" fg:w="71897"/><text x="99.4332%" y="607.50"></text></g><g><title>perf_event_mmap_output (71,897 samples, 0.09%)</title><rect x="99.1832%" y="581" width="0.0888%" height="15" fill="rgb(251,153,30)" fg:x="80348594" fg:w="71897"/><text x="99.4332%" y="591.50"></text></g><g><title>__perf_event_header__init_id (71,897 samples, 0.09%)</title><rect x="99.1832%" y="565" width="0.0888%" height="15" fill="rgb(239,152,38)" fg:x="80348594" fg:w="71897"/><text x="99.4332%" y="575.50"></text></g><g><title>rwsem_wake.isra.0 (88,144 samples, 0.11%)</title><rect x="99.2720%" y="645" width="0.1088%" height="15" fill="rgb(249,139,47)" fg:x="80420491" fg:w="88144"/><text x="99.5220%" y="655.50"></text></g><g><title>security_file_mprotect (70,644 samples, 0.09%)</title><rect x="99.3808%" y="645" width="0.0872%" height="15" fill="rgb(244,64,35)" fg:x="80508635" fg:w="70644"/><text x="99.6308%" y="655.50"></text></g><g><title>clone3 (50,306,536 samples, 62.10%)</title><rect x="37.4767%" y="821" width="62.0990%" height="15" fill="rgb(216,46,15)" fg:x="30359971" fg:w="50306536"/><text x="37.7267%" y="831.50">clone3</text></g><g><title>start_thread (31,910,259 samples, 39.39%)</title><rect x="60.1853%" y="805" width="39.3904%" height="15" fill="rgb(250,74,19)" fg:x="48756248" fg:w="31910259"/><text x="60.4353%" y="815.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (29,825,977 samples, 36.82%)</title><rect x="62.7581%" y="789" width="36.8175%" height="15" fill="rgb(249,42,33)" fg:x="50840530" fg:w="29825977"/><text x="63.0081%" y="799.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (3,757,676 samples, 4.64%)</title><rect x="94.9371%" y="773" width="4.6385%" height="15" fill="rgb(242,149,17)" fg:x="76908831" fg:w="3757676"/><text x="95.1871%" y="783.50">std::..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (3,757,676 samples, 4.64%)</title><rect x="94.9371%" y="757" width="4.6385%" height="15" fill="rgb(244,29,21)" fg:x="76908831" fg:w="3757676"/><text x="95.1871%" y="767.50">std::..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (2,766,868 samples, 3.42%)</title><rect x="96.1602%" y="741" width="3.4155%" height="15" fill="rgb(220,130,37)" fg:x="77899639" fg:w="2766868"/><text x="96.4102%" y="751.50">std..</text></g><g><title>__GI_mprotect (2,301,904 samples, 2.84%)</title><rect x="96.7341%" y="725" width="2.8415%" height="15" fill="rgb(211,67,2)" fg:x="78364603" fg:w="2301904"/><text x="96.9841%" y="735.50">__..</text></g><g><title>entry_SYSCALL_64_after_hwframe (2,301,904 samples, 2.84%)</title><rect x="96.7341%" y="709" width="2.8415%" height="15" fill="rgb(235,68,52)" fg:x="78364603" fg:w="2301904"/><text x="96.9841%" y="719.50">en..</text></g><g><title>do_syscall_64 (2,301,904 samples, 2.84%)</title><rect x="96.7341%" y="693" width="2.8415%" height="15" fill="rgb(246,142,3)" fg:x="78364603" fg:w="2301904"/><text x="96.9841%" y="703.50">do..</text></g><g><title>__x64_sys_mprotect (2,301,904 samples, 2.84%)</title><rect x="96.7341%" y="677" width="2.8415%" height="15" fill="rgb(241,25,7)" fg:x="78364603" fg:w="2301904"/><text x="96.9841%" y="687.50">__..</text></g><g><title>do_mprotect_pkey (2,301,904 samples, 2.84%)</title><rect x="96.7341%" y="661" width="2.8415%" height="15" fill="rgb(242,119,39)" fg:x="78364603" fg:w="2301904"/><text x="96.9841%" y="671.50">do..</text></g><g><title>tlb_finish_mmu (87,228 samples, 0.11%)</title><rect x="99.4680%" y="645" width="0.1077%" height="15" fill="rgb(241,98,45)" fg:x="80579279" fg:w="87228"/><text x="99.7180%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (113,515 samples, 0.14%)</title><rect x="99.5756%" y="821" width="0.1401%" height="15" fill="rgb(254,28,30)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="831.50"></text></g><g><title>do_syscall_64 (113,515 samples, 0.14%)</title><rect x="99.5756%" y="805" width="0.1401%" height="15" fill="rgb(241,142,54)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="815.50"></text></g><g><title>__x64_sys_execve (113,515 samples, 0.14%)</title><rect x="99.5756%" y="789" width="0.1401%" height="15" fill="rgb(222,85,15)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="799.50"></text></g><g><title>do_execveat_common.isra.0 (113,515 samples, 0.14%)</title><rect x="99.5756%" y="773" width="0.1401%" height="15" fill="rgb(210,85,47)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="783.50"></text></g><g><title>bprm_execve (113,515 samples, 0.14%)</title><rect x="99.5756%" y="757" width="0.1401%" height="15" fill="rgb(224,206,25)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="767.50"></text></g><g><title>load_elf_binary (113,515 samples, 0.14%)</title><rect x="99.5756%" y="741" width="0.1401%" height="15" fill="rgb(243,201,19)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="751.50"></text></g><g><title>asm_exc_page_fault (113,515 samples, 0.14%)</title><rect x="99.5756%" y="725" width="0.1401%" height="15" fill="rgb(236,59,4)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="735.50"></text></g><g><title>exc_page_fault (113,515 samples, 0.14%)</title><rect x="99.5756%" y="709" width="0.1401%" height="15" fill="rgb(254,179,45)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="719.50"></text></g><g><title>do_user_addr_fault (113,515 samples, 0.14%)</title><rect x="99.5756%" y="693" width="0.1401%" height="15" fill="rgb(226,14,10)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="703.50"></text></g><g><title>handle_mm_fault (113,515 samples, 0.14%)</title><rect x="99.5756%" y="677" width="0.1401%" height="15" fill="rgb(244,27,41)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="687.50"></text></g><g><title>__handle_mm_fault (113,515 samples, 0.14%)</title><rect x="99.5756%" y="661" width="0.1401%" height="15" fill="rgb(235,35,32)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="671.50"></text></g><g><title>do_fault (113,515 samples, 0.14%)</title><rect x="99.5756%" y="645" width="0.1401%" height="15" fill="rgb(218,68,31)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="655.50"></text></g><g><title>__anon_vma_prepare (113,515 samples, 0.14%)</title><rect x="99.5756%" y="629" width="0.1401%" height="15" fill="rgb(207,120,37)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="639.50"></text></g><g><title>kmem_cache_alloc (113,515 samples, 0.14%)</title><rect x="99.5756%" y="613" width="0.1401%" height="15" fill="rgb(227,98,0)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="623.50"></text></g><g><title>memcg_slab_post_alloc_hook (113,515 samples, 0.14%)</title><rect x="99.5756%" y="597" width="0.1401%" height="15" fill="rgb(207,7,3)" fg:x="80666507" fg:w="113515"/><text x="99.8256%" y="607.50"></text></g><g><title>_raw_spin_lock_irq (10,394 samples, 0.01%)</title><rect x="99.7316%" y="789" width="0.0128%" height="15" fill="rgb(206,98,19)" fg:x="80792863" fg:w="10394"/><text x="99.9816%" y="799.50"></text></g><g><title>calculate_sigpending (32,629 samples, 0.04%)</title><rect x="99.7226%" y="805" width="0.0403%" height="15" fill="rgb(217,5,26)" fg:x="80785546" fg:w="32629"/><text x="99.9726%" y="815.50"></text></g><g><title>recalc_sigpending (14,918 samples, 0.02%)</title><rect x="99.7444%" y="789" width="0.0184%" height="15" fill="rgb(235,190,38)" fg:x="80803257" fg:w="14918"/><text x="99.9944%" y="799.50"></text></g><g><title>__perf_event_task_sched_in (11,053 samples, 0.01%)</title><rect x="99.7947%" y="773" width="0.0136%" height="15" fill="rgb(247,86,24)" fg:x="80843989" fg:w="11053"/><text x="100.0447%" y="783.50"></text></g><g><title>__sysvec_irq_work (9,608 samples, 0.01%)</title><rect x="99.8364%" y="741" width="0.0119%" height="15" fill="rgb(205,101,16)" fg:x="80877725" fg:w="9608"/><text x="100.0864%" y="751.50"></text></g><g><title>finish_task_switch.isra.0 (67,772 samples, 0.08%)</title><rect x="99.7758%" y="789" width="0.0837%" height="15" fill="rgb(246,168,33)" fg:x="80828683" fg:w="67772"/><text x="100.0258%" y="799.50"></text></g><g><title>asm_sysvec_irq_work (39,233 samples, 0.05%)</title><rect x="99.8111%" y="773" width="0.0484%" height="15" fill="rgb(231,114,1)" fg:x="80857222" fg:w="39233"/><text x="100.0611%" y="783.50"></text></g><g><title>sysvec_irq_work (30,065 samples, 0.04%)</title><rect x="99.8224%" y="757" width="0.0371%" height="15" fill="rgb(207,184,53)" fg:x="80866390" fg:w="30065"/><text x="100.0724%" y="767.50"></text></g><g><title>srso_alias_return_thunk (9,122 samples, 0.01%)</title><rect x="99.8482%" y="741" width="0.0113%" height="15" fill="rgb(224,95,51)" fg:x="80887333" fg:w="9122"/><text x="100.0982%" y="751.50"></text></g><g><title>schedule_tail (80,129 samples, 0.10%)</title><rect x="99.7629%" y="805" width="0.0989%" height="15" fill="rgb(212,188,45)" fg:x="80818175" fg:w="80129"/><text x="100.0129%" y="815.50"></text></g><g><title>srso_alias_safe_ret (15,079 samples, 0.02%)</title><rect x="99.9225%" y="773" width="0.0186%" height="15" fill="rgb(223,154,38)" fg:x="80947464" fg:w="15079"/><text x="100.1725%" y="783.50"></text></g><g><title>exit_to_user_mode_prepare (78,187 samples, 0.10%)</title><rect x="99.8861%" y="789" width="0.0965%" height="15" fill="rgb(251,22,52)" fg:x="80918046" fg:w="78187"/><text x="100.1361%" y="799.50"></text></g><g><title>switch_fpu_return (33,690 samples, 0.04%)</title><rect x="99.9411%" y="773" width="0.0416%" height="15" fill="rgb(229,209,22)" fg:x="80962543" fg:w="33690"/><text x="100.1911%" y="783.50"></text></g><g><title>restore_fpregs_from_fpstate (20,818 samples, 0.03%)</title><rect x="99.9570%" y="757" width="0.0257%" height="15" fill="rgb(234,138,34)" fg:x="80975415" fg:w="20818"/><text x="100.2070%" y="767.50"></text></g><g><title>flamegraph_scal (81,005,257 samples, 99.99%)</title><rect x="0.0000%" y="837" width="99.9938%" height="15" fill="rgb(212,95,11)" fg:x="0" fg:w="81005257"/><text x="0.2500%" y="847.50">flamegraph_scal</text></g><g><title>ret_from_fork (225,235 samples, 0.28%)</title><rect x="99.7158%" y="821" width="0.2780%" height="15" fill="rgb(240,179,47)" fg:x="80780022" fg:w="225235"/><text x="99.9658%" y="831.50"></text></g><g><title>syscall_exit_to_user_mode (106,953 samples, 0.13%)</title><rect x="99.8618%" y="805" width="0.1320%" height="15" fill="rgb(240,163,11)" fg:x="80898304" fg:w="106953"/><text x="100.1118%" y="815.50"></text></g><g><title>syscall_exit_to_user_mode_prepare (9,024 samples, 0.01%)</title><rect x="99.9827%" y="789" width="0.0111%" height="15" fill="rgb(236,37,12)" fg:x="80996233" fg:w="9024"/><text x="100.2327%" y="799.50"></text></g><g><title>all (81,010,283 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="81010283"/><text x="0.2500%" y="863.50"></text></g></svg></svg>
